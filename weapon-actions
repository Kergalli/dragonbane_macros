// Dragonbane Action Rules Monitor - Abandoned - now part of Dragonbane Combat Assistant
// Run once to automatically show rules for combat actions when taken

(function() {
    'use strict';
    
    if (window.dragonbaneActionMonitor) {
        window.dragonbaneActionMonitor.uninstall();
    }
    
    // Pre-compiled patterns for efficiency
    const UUID_PATTERN = /@UUID\[Actor\.[^\.]+\.Item\.([^\]]+)\]/;
    const ACTION_PATTERN = /(parry|topple|disarm|weakpoint|weak\s+spot)/i; // Added "weak spot"
    
    // Action rules database
    const actionRules = {
        parry: (weapon) => {
            const durability = weapon.system.durability;
            return `<li><strong>${weapon.name} Durability:</strong> ${durability}</li>
                    <li>Parrying uses your action for the turn (reaction)</li>
                    <li>Success = no damage. If damage > durability, weapon damaged until repaired</li>
                    <li>Piercing attacks cannot damage parrying weapons/shields</li>
                    <li>Monster attacks cannot be parried (unless specified)</li>`;
        },
        topple: () => `<li>No damage dealt</li>
                      <li>Opponent makes opposed EVADE roll</li>
                      <li>Cannot be dodged or parried</li>
                      <li>Success = opponent becomes prone</li>`,
        
        disarm: () => `<li>No damage dealt</li>
                       <li>Opponent makes opposed weapon skill roll</li>
                       <li>Cannot be dodged or parried</li>
                       <li>Two-handed weapon = you get bane</li>
                       <li>Success = weapon lands D6 meters away (your choice of direction)</li>
                       <li>Cannot disarm shields or natural weapons</li>`,
        
        weakpoint: () => `<li>Piercing weapons only: Target gaps in armor</li>
                          <li>You get bane on attack</li>
                          <li>Success = enemy counts as armorless</li>`
    };
    
    // Single hook for chat message analysis
    const chatHookId = Hooks.on('createChatMessage', (message) => {
        // Skip our own rules messages only
        if (message.flags?.dragonbaneRulesMessage) return;
        
        // Direct action detection
        const content = message.content;
        if (!content) return;
        
        const actionMatch = content.match(ACTION_PATTERN);
        if (!actionMatch) return;
        
        // Process immediately
        const action = actionMatch[1].toLowerCase();
        // Normalize "weak spot" to "weakpoint" for our rules lookup
        const normalizedAction = action.includes('weak') ? 'weakpoint' : action;
        let ruleContent;
        
        if (normalizedAction === 'parry') {
            const uuidMatch = content.match(UUID_PATTERN);
            if (uuidMatch) {
                const weapon = game.actors.get(message.speaker.actor)?.items.get(uuidMatch[1]);
                if (weapon) {
                    ruleContent = actionRules.parry(weapon);
                }
            }
        } else {
            ruleContent = actionRules[normalizedAction]();
        }
        
        // Display rules if we have content (with delay)
        if (ruleContent) {
            // Custom speaker names
            let speakerName;
            if (normalizedAction === 'weakpoint') {
                speakerName = 'Find Weak Spot Rules';
            } else {
                speakerName = `${normalizedAction.charAt(0).toUpperCase() + normalizedAction.slice(1)} Rules`;
            }
            
            setTimeout(() => {
                ChatMessage.create({
                    content: `<div style="border: 2px solid #00604d; padding: 10px; background: #f0e9de; margin: 5px 0;">
                                <ul>${ruleContent}</ul>
                              </div>`,
                    speaker: { alias: speakerName },
                    flags: { dragonbaneRulesMessage: true }
                });
            }, 3000);
        }
    });
    
    // Installation
    window.dragonbaneActionMonitor = {
        installed: true,
        version: "9.0-final",
        uninstall() {
            Hooks.off(chatHookId);
            delete window.dragonbaneActionMonitor;
            ui.notifications.info("Dragonbane Action Monitor uninstalled");
        }
    };
    
    ui.notifications.info("Dragonbane Action Monitor v9.0 installed!");
    
})();
