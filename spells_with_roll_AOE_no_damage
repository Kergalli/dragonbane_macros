// SPELL WITH ROLL AND AOE NO DAMAGE
(async () => {
if (typeof item === "undefined") {
  ui.notifications.warn("This macro must be run from within an ItemMacro.");
  return;
}

// ⭐ Setup ⭐
const itemName     = item.name;
const wpCost       = item.system.rank * 2;
const SOUND_PATH   = "sounds/Spells/Elemental/spell-plant-moving-3.mp3";
await AudioHelper.preloadSound(SOUND_PATH);
const EFFECT_PATH  = "https://assets.forge-vtt.com/655833db24905b2324eb7411/Dragonbane-Images/Fir01.webm";
const SCALE        = 2.5;
//const status_id	   = "prone" // Condition Array in console --> CONFIG.statusEffects
const DEBUG_MODE   = false;

// --- Token, Actor, Target, Spell, and WP Checks ---
const selected = canvas.tokens.controlled[0];
if (!selected) {
  ui.notifications.warn(`Please select your token before casting ${itemName}.`);
  return;
}

const myTokenActor = selected.actor;
const spell = myTokenActor.items.find(i => i.name === itemName && i.type === item.type);
if (!spell) {
  ui.notifications.warn(`You do not know the spell ${itemName}!`);
  return;
}

// ⭐ Untarget any previously selected tokens ⭐
//game.user.updateTokenTargets([]);

// ⭐ Confirm target selection (if needed) ⭐
if (game.user.targets.size === 0) {
   ui.notifications.warn(`Please choose the target of the spell before casting ${itemName}.`);
   return; 
}

const wpValue = myTokenActor.system.willPoints.value;
if (wpValue < wpCost) {
  ui.notifications.warn("Not enough Willpower points!");
  return;
}

// --- Spell roll dialog box and success evaluation ---
let rollResult;

try {
  rollResult = await game.dragonbane.rollItem(itemName);
  if (DEBUG_MODE) console.log(`[Spell Macro] ${itemName} - Roll Result:`, rollResult);
} catch (error) {
  ui.notifications.warn(`${itemName} casting was cancelled.`);
  return;
}

// --- Check if the user canceled the roll ---
if (!rollResult?.postRollData) {
  ui.notifications.warn(`${itemName} casting was cancelled.`);
  return;
}

if (rollResult.postRollData.success) {
  const name = myTokenActor?.name ?? "Unnamed Hero";
  const remainingWP = myTokenActor.system.willPoints.value;
  ui.notifications.info(`${name} has ${remainingWP} WP remaining.`);
  const description  = await TextEditor.enrichHTML(item.system.description, { async: true });

const chatContent = `
  <b>${name}</b> casts <i>${itemName}</i>!<br><br>
  <details>
  <summary><strong>Show Spell Description</strong></summary>
  ${description}
  </details>
`;

  ChatMessage.create({
    user: game.user.id,
    speaker: ChatMessage.getSpeaker({ token: selected }),
    content: chatContent
  });

// --- Apply custom status ---
//  selected.actor.toggleStatusEffect(status_id);

// ⭐ Configuration of AOE ⭐
const EFFECT_LABEL = "Ensnared";
const EFFECT_ICON = "modules/game-icons-net/whitetransparent/entangled-typhoon.svg";
const EFFECT_DURATION_SECONDS = 900;
const targetToken = Array.from(game.user.targets)[0];
const originToken = canvas.tokens.controlled[0];

// ⭐ Calculate Range using grid squares instead of Euclidean distance ⭐
const RANGE_SQUARES = 5; // 5 grid squares = 10 meters (if grid is 2m/square)

function getGridDistance(a, b) {
  const dx = Math.abs(a.x - b.x) / canvas.grid.size;
  const dy = Math.abs(a.y - b.y) / canvas.grid.size;
  return Math.max(dx, dy); // Chebyshev distance: diagonals = 1
}

const tokensInRange = canvas.tokens.placeables.filter(token => {
  if (!token.actor || token === originToken) return false;
  const dist = getGridDistance(targetToken.center, token.center); // ⭐ selected or target Change to originToken.center if necessary
  return dist <= RANGE_SQUARES;
});

// ⭐ Add the target token back into the affected list ⭐
if (!tokensInRange.includes(targetToken) && target !== originToken) {
  tokensInRange.push(target); // <-- include target, if not caster
}

for (const token of tokensInRange) {
  const actor = token.actor;

// --- TEMPORARY EFFECT for visual indicator ---
  const existingEffect = actor.effects.find(e => e.name === EFFECT_LABEL);
  if (!existingEffect) {
    const effectData = {
      name: EFFECT_LABEL,
      icon: EFFECT_ICON,
      origin: `Scene.${canvas.scene.id}.Token.${originToken.id}`,
      duration: {
        seconds: EFFECT_DURATION_SECONDS,
	startTime: game.time.worldTime
      },
      changes: [
        {
          key: "flags.core.statusId",
          mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,
          value: "debuff",
          priority: 10
        }
      ]
};
    await actor.createEmbeddedDocuments("ActiveEffect", [effectData]);

  }

}
  new Sequence()
    .sound(SOUND_PATH)
    .effect()
      .file(EFFECT_PATH)
      .scale(SCALE)
      .atLocation(targetToken) // ⭐ selected or targetToken
	   .fadeIn(2000)
	   .fadeOut(2000)
    .play();

// --- Second animation (if needed) ---
  new Sequence ()
  	.effect ()
  	.file ("jb2a.template_circle.whirl.loop.green")
  	.atLocation(targetToken) // ⭐ selected or targetToken
	.tint("#154f2c")
	.opacity(0.7)
	.scale(2.4)
	.fadeIn(5000)
	.belowTokens()
	.persist()

.play()

}
})();
