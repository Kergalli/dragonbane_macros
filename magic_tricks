// MAGIC TRICK: WP Spend with Dialog
if (typeof item === "undefined") {
  ui.notifications.warn("This macro must be run from within an ItemMacro.");
  return;
}

// --- Setup ---
const itemName    = item.name;
const wpCost      = 1;
const SOUND_PATH  = "sounds/Spells/Whoosh/spell-whoosh-13.mp3";
await AudioHelper.preloadSound(SOUND_PATH);
const EFFECT_PATH = "jb2a.wind_stream.1200.white";
const DEBUG_MODE  = false;

// --- Token & Actor Checks ---
const selected = canvas.tokens.controlled[0];
if (!selected) {
  ui.notifications.warn(`Please select your token before casting ${itemName}.`);
  return;
}

const myTokenActor = selected.actor;
const spell = myTokenActor.items.find(i => i.name === itemName && i.type === item.type);
if (!spell) {
  ui.notifications.warn(`You do not know the magic trick ${itemName}!`);
  return;
}

const wpValue = myTokenActor.system.willPoints.value;
if (wpValue < wpCost) {
  ui.notifications.warn("Not enough Willpower points!");
  return;
}

// --- Dialog ---
new Dialog({
  title: "Cast Magic Trick",
  content: `<p>Spend <b>${wpCost} WP</b> to cast <b>${itemName}</b>?</p>`,
  buttons: {
    yes: {
      icon: '<i class="fas fa-check"></i>',
      label: "Yes",
      callback: async () => {
        await myTokenActor.update({ "system.willPoints.value": Math.max(0, myTokenActor.system.willPoints.value - wpCost) });

        const name = myTokenActor?.name ?? "Unnamed Hero";
	const remainingWP = myTokenActor.system.willPoints.value;
	ui.notifications.info(`${name} has ${remainingWP} WP remaining.`);
	const description = await TextEditor.enrichHTML(item.system.description, { async: true });

	const chatContent = `
  	  <b>${name}</b> casts <i>${itemName}</i>!
  	  <details>
   	  <summary><strong>Show Spell Description</strong></summary>
    	  ${description}
  	  </details>
	`;

        ChatMessage.create({
          user: game.user.id,
          speaker: ChatMessage.getSpeaker({ token: selected }),
          content: chatContent
        });

        new Sequence()
          .sound(SOUND_PATH)
          .effect()
            .file(EFFECT_PATH)
            .atLocation(selected)
          .play();
      }
    },
    no: {
      icon: '<i class="fas fa-times"></i>',
      label: "No"
    }
  },
  default: "no"
}).render(true);
