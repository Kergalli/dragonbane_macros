// ---------------------------------------------------
// MAGIC TRICK with DIALOG FOR WP SPEND
// ---------------------------------------------------
// Get name and description of spell
  const itemName = item.name;
  const description = item.system.description;

// Make sure caster token is selected
  if (canvas.tokens.controlled.length === 0) {
  	ui.notifications.warn(`Please select your token before casting ${itemName}.`);
  	return; 
}

// Set actor and spell variables, find spell on character sheet
  const myTokenActor = canvas.tokens.controlled[0].actor;
  const spell = myTokenActor.items.find(item => item.name == `${itemName}`);
  if(spell == null || spell == undefined){
	ui.notifications.warn(`You do not know the magic trick ${itemName}!`);
	return;
	}

// Check if character has available Willpower points
  const wpValue = actor.system.willPoints.value;
  if(wpValue == 0){
	ui.notifications.warn("You are out of Willpower points!");
	return;
	}

// Prompt to confirm cast and Willpower spend for Magic Trick
  new Dialog({
  	title: "Cast Magic Trick",
  	content: `<p>Spend <b>1 WP</b> to cast <b>${itemName}</b>?</p>`,
  	buttons: {
    		yes: {
      		icon: '<i class="fas fa-check"></i>',
      		label: "Yes",
      		callback: () => {
        
// Adjust Willpower value
  const wpCost = 1;
  const wpAdj = wpValue - wpCost
  actor.update({ ["system.willPoints.value"]: wpAdj});

// Create chat card with actor, spell name and description
  const name = myTokenActor?.name || "Unnamed Hero";
	ChatMessage.create({
    	user: game.user._id,
    	speaker: ChatMessage.getSpeaker({token: actor}),
    	content: `<b>${name}</b> casts ${itemName}! ${description}`

});

// Apply custom Active effect or condition if appropriate
// Get Condition Array in console --> CONFIG.statusEffects
// token.actor.toggleStatusEffect("condition.or.array.code.here");

//Define target if using .atLocation(target) below
// const target = Array.from(game.user.targets) [0]

// Path to sound file
new Sequence ()
	.sound("path/to/sound/soundeffect.mp3")
	.play()

// Path to animation file (set location accordingly)
new Sequence ()
	.effect ()
	.file ("jb2a.sequencer_database_path")
	.atLocation(token)
//	.atLocation(target)
	.play()

      }
    },
    no: {
      icon: '<i class="fas fa-times"></i>',
      label: "No"
    }
  },
  default: "no"
}).render(true);
