// ENCUMBRANCE MONITOR - Monitors characters in a defined folder on a timed interval

window.EncumbranceMonitor = (function () {
    const CONFIG = {
        statusEffectId: "A27ODlMbOrixkX4a",  // Place your condition ID here
        checkIntervalSeconds: 30,            // Interval to check characters emcumbrance state
        folderName: "Party"                  // Folder containing your PCs
    };

    let intervalId = null;
    let partyMembers = [];

    const updatePartyList = () => {
        partyMembers = game.actors.filter(actor =>
            actor.type === "character" && actor.folder?.name === CONFIG.folderName
        );
    };

    const checkEncumbrance = () => {
        for (const actor of partyMembers) {
            try {
                const enc = actor.system?.encumbrance?.value || 0;
                const max = actor.system?.maxEncumbrance?.value || 0;
                const hasEffect = actor.effects.some(e => e.statuses?.has(CONFIG.statusEffectId));

                if ((enc > max) !== hasEffect) {
                    actor.toggleStatusEffect(CONFIG.statusEffectId, { active: enc > max });
                    ui.notifications.info(`${actor.name} is ${enc > max ? 'now' : 'no longer'} Encumbered!`);
                }
            } catch (error) {
                console.error(`Error checking ${actor.name}:`, error);
            }
        }
    };

    return {
        start() {
            if (!game.user.isGM) return ui.notifications.error("GM only!");

            updatePartyList();
            if (!partyMembers.length) {
                return ui.notifications.warn(`No characters in "${CONFIG.folderName}" folder!`);
            }

            intervalId = setInterval(checkEncumbrance, CONFIG.checkIntervalSeconds * 1000);
            ui.notifications.info(`Monitoring ${partyMembers.length} party members for encumbrance.`);
            checkEncumbrance();
        }
    };
})();

EncumbranceMonitor.start();
