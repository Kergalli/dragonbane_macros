// SPELL WITH ROLL
if (typeof item === "undefined") {
  ui.notifications.warn("This macro must be run from within an ItemMacro.");
  return;
}

// --- Setup ---
const itemName     = item.name;
const wpCost       = item.system.rank * 2;
const SOUND_PATH   = "sounds/Spells/Buff/spell-buff-long-4.mp3";
await AudioHelper.preloadSound(SOUND_PATH);
const EFFECT_PATH  = "jb2a.condition.boon.01.009.green";
const SCALE        = 0.4;
const status_id	   = "7LOyAthpOt1TFBLq"
const DEBUG_MODE   = false;

// --- Token, Actor, Spell, and WP Checks ---
const selected = canvas.tokens.controlled[0];
if (!selected) {
  ui.notifications.warn(`Please select your token before casting ${itemName}.`);
  return;
}

const myTokenActor = selected.actor;
const spell = myTokenActor.items.find(i => i.name === itemName && i.type === item.type);
if (!spell) {
  ui.notifications.warn(`You do not know the spell ${itemName}!`);
  return;
}

const wpValue = myTokenActor.system.willPoints.value;
if (wpValue < wpCost) {
  ui.notifications.warn("Not enough Willpower points!");
  return;
}

// --- Untarget any previously selected tokens ---
game.user.updateTokenTargets([]);

// --- Target selection (comment out if not needed in Sequencer) ---
// const target = Array.from(game.user.targets)[0];
// if (game.user.targets.size === 0) {
//   ui.notifications.warn(`Please choose the target of the spell before casting ${itemName}.`);
//   return; 
// }

// --- Spell roll dialog box and success evaluation ---
let rollResult;

try {
  rollResult = await game.dragonbane.rollItem(itemName);
  if (DEBUG_MODE) console.log(`[Spell Macro] ${itemName} - Roll Result:`, rollResult);
} catch (error) {
  ui.notifications.warn(`${itemName} casting was cancelled.`);
  return;
}

// --- Check if the user canceled the roll ---
if (!rollResult?.postRollData) {
  ui.notifications.warn(`${itemName} casting was cancelled.`);
  return;
}

if (rollResult.postRollData.success) {
  const name = myTokenActor?.name ?? "Unnamed Hero";
  const remainingWP = myTokenActor.system.willPoints.value;
  ui.notifications.info(`${name} has ${remainingWP} WP remaining.`);

  const description  = await TextEditor.enrichHTML(item.system.description, { async: true });
  const chatContent = `
    <b>${name}</b> casts <i>${itemName}</i>!<br><br>
    <details>
    <summary><strong>Show Spell Description</strong></summary>
    ${description}
    </details>
`;

  ChatMessage.create({
    user: game.user.id,
    speaker: ChatMessage.getSpeaker({ token: selected }),
    content: chatContent
  });

  // -- Apply custom status - Condition Array in console --> CONFIG.statusEffects ---
  selected.actor.toggleStatusEffect(status_id);

  new Sequence()
    .sound(SOUND_PATH)
    .effect()
      .file(EFFECT_PATH)
      .scale(SCALE)
      .atLocation(selected)
    .play();
}
