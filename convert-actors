/**
 * Dragonbane Actor Type Converter
 * Usage: Select a single actor token, then run this macro.
 */

(async () => {
  const tokens = canvas.tokens.controlled;
  if (tokens.length !== 1) {
    ui.notifications.warn("Please select exactly one token/actor to convert.");
    return;
  }

  const actor = tokens[0].actor;
  if (!actor) {
    ui.notifications.error("Selected token has no associated actor.");
    return;
  }

  const currentType = actor.type;
  const validTypes = ["character", "npc", "monster"];

  if (!validTypes.includes(currentType)) {
    ui.notifications.error(
      `Selected actor type "${currentType}" is not supported for conversion.`
    );
    return;
  }

  const targetTypes = validTypes.filter((t) => t !== currentType);

  let dialogContent = `
        <form>
            <div class="form-group">
                <label><strong>Current Actor Type:</strong> ${
                  currentType === "npc"
                    ? "NPC"
                    : currentType.charAt(0).toUpperCase() + currentType.slice(1)
                }</label>
            </div>
            <div class="form-group">
                <label><strong>Current Actor Name:</strong> ${
                  actor.name
                }</label>
            </div>
            <div class="form-group">
                <label><strong>Convert to:</strong></label>
                <select name="targetType" id="targetType">
                    ${targetTypes
                      .map((t) => {
                        const displayName =
                          t === "npc"
                            ? "NPC"
                            : t.charAt(0).toUpperCase() + t.slice(1);
                        return `<option value="${t}">${displayName}</option>`;
                      })
                      .join("")}
                </select>
            </div>
            <div class="form-group">
                <label><strong>New Actor Name:</strong></label>
                <input type="text" name="newName" value="${
                  actor.name
                }" style="width: 100%"/>
            </div>
            <div id="conversionFields" style="min-height: 95px;"></div>
        </form>
    `;

  new Dialog(
    {
      title: "Convert Actor Type",
      content: dialogContent,
      buttons: {
        convert: {
          icon: '<i class="fas fa-exchange-alt"></i>',
          label: "Convert",
          callback: async (html) => {
            const targetType = html.find('[name="targetType"]').val();
            const newName = html.find('[name="newName"]').val();

            let conversionData = {};

            if (targetType === "monster") {
              const ferocity =
                parseInt(html.find('[name="ferocity"]').val()) || 1;
              const size = html.find('[name="size"]').val() || "normal";
              const armor = parseInt(html.find('[name="armor"]').val()) || 0;
              conversionData.ferocity = ferocity;
              conversionData.size = size;
              conversionData.armor = armor;
            } else if (currentType === "monster") {
              if (targetType === "character") {
                conversionData.attributes = {
                  str: parseInt(html.find('[name="str"]').val()) || 10,
                  con: parseInt(html.find('[name="con"]').val()) || 10,
                  agl: parseInt(html.find('[name="agl"]').val()) || 10,
                  int: parseInt(html.find('[name="int"]').val()) || 10,
                  wil: parseInt(html.find('[name="wil"]').val()) || 10,
                  cha: parseInt(html.find('[name="cha"]').val()) || 10,
                };
              } else if (targetType === "npc") {
                conversionData.wil =
                  parseInt(html.find('[name="wil"]').val()) || 10;
                conversionData.damageBonus = {
                  str: html.find('[name="damageBonusStr"]').val() || "none",
                  agl: html.find('[name="damageBonusAgl"]').val() || "none",
                };
              }
            } else if (currentType === "npc" && targetType === "character") {
              conversionData.attributes = {
                str: parseInt(html.find('[name="str"]').val()) || 10,
                con: parseInt(html.find('[name="con"]').val()) || 10,
                agl: parseInt(html.find('[name="agl"]').val()) || 10,
                int: parseInt(html.find('[name="int"]').val()) || 10,
                wil: parseInt(html.find('[name="wil"]').val()) || 10,
                cha: parseInt(html.find('[name="cha"]').val()) || 10,
              };
            }

            await convertActor(actor, targetType, newName, conversionData);
          },
        },
        cancel: {
          icon: '<i class="fas fa-times"></i>',
          label: "Cancel",
        },
      },
      default: "convert",
      render: (html) => {
        const updateFields = () => {
          const targetType = html.find('[name="targetType"]').val();
          const fieldsDiv = html.find("#conversionFields");
          fieldsDiv.empty();

          if (targetType === "monster") {
            fieldsDiv.append(`
                        <div class="form-group">
                            <label><strong>Ferocity Value:</strong></label>
                            <input type="number" name="ferocity" value="1" min="1" style="width: 100%"/>
                        </div>
                        <div class="form-group">
                            <label><strong>Size:</strong></label>
                            <select name="size" style="width: 100%">
                                <option value="small">Small</option>
                                <option value="normal" selected>Normal</option>
                                <option value="large">Large</option>
                                <option value="huge">Huge</option>
                                <option value="swarm">Swarm</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label><strong>Armor Rating:</strong></label>
                            <input type="number" name="armor" value="0" min="0" style="width: 100%"/>
                        </div>
                    `);
          } else if (currentType === "monster" || currentType === "npc") {
            if (targetType === "character") {
              fieldsDiv.append(`
                            <div class="form-group">
                                <label><strong>Set Attributes:</strong></label>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 4px;">
                                    <div>
                                        <label style="display: inline-block; width: 40px;">STR:</label>
                                        <input type="number" name="str" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                    <div>
                                        <label style="display: inline-block; width: 40px;">CON:</label>
                                        <input type="number" name="con" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                    <div>
                                        <label style="display: inline-block; width: 40px;">AGL:</label>
                                        <input type="number" name="agl" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                    <div>
                                        <label style="display: inline-block; width: 40px;">INT:</label>
                                        <input type="number" name="int" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                    <div>
                                        <label style="display: inline-block; width: 40px;">WIL:</label>
                                        <input type="number" name="wil" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                    <div>
                                        <label style="display: inline-block; width: 40px;">CHA:</label>
                                        <input type="number" name="cha" value="10" min="1" max="18" style="width: 50%; text-align: center;"/>
                                    </div>
                                </div>
                            </div>
                        `);
            } else if (targetType === "npc") {
              fieldsDiv.append(`
                            <div class="form-group">
                                <label><strong>Set Willpower:</strong></label>
                                <input type="number" name="wil" value="10" min="1" max="18" style="width: 100%"/>
                            </div>
                            <div class="form-group">
                                <label><strong>Damage Bonus (STR):</strong></label>
                                <select name="damageBonusStr" style="width: 100%">
                                    <option value="none" selected>None</option>
                                    <option value="d4">D4</option>
                                    <option value="d6">D6</option>
                                    <option value="d8">D8</option>
                                    <option value="d10">D10</option>
                                    <option value="d12">D12</option>
                                    <option value="d20">D20</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label><strong>Damage Bonus (AGL):</strong></label>
                                <select name="damageBonusAgl" style="width: 100%">
                                    <option value="none" selected>None</option>
                                    <option value="d4">D4</option>
                                    <option value="d6">D6</option>
                                    <option value="d8">D8</option>
                                    <option value="d10">D10</option>
                                    <option value="d12">D12</option>
                                    <option value="d20">D20</option>
                                </select>
                            </div>
                        `);
            }
          }
        };

        html.find('[name="targetType"]').on("change", updateFields);
        updateFields();
      },
    },
    {
      width: 400,
      height: 300,
    }
  ).render(true);
})();

async function convertActor(sourceActor, targetType, newName, conversionData) {
  try {
    ui.notifications.info(`Converting ${sourceActor.name} to ${targetType}...`);

    const sourceData = sourceActor.toObject();
    const sourceType = sourceActor.type;

    const sourceSystem = sourceActor.system;

    let newActorData = {
      name: newName,
      type: targetType,
      img: sourceData.img,
      system: {},
      items: sourceData.items,
      effects: sourceData.effects,
    };

    if (sourceType === "character" && targetType === "npc") {
      newActorData.system = convertCharacterToNPC(sourceSystem);
    } else if (sourceType === "character" && targetType === "monster") {
      newActorData.system = convertCharacterToMonster(
        sourceSystem,
        conversionData
      );
    } else if (sourceType === "npc" && targetType === "character") {
      newActorData.system = convertNPCToCharacter(
        sourceData.system,
        conversionData
      );
    } else if (sourceType === "npc" && targetType === "monster") {
      newActorData.system = convertNPCToMonster(
        sourceData.system,
        conversionData
      );
    } else if (sourceType === "monster" && targetType === "character") {
      newActorData.system = convertMonsterToCharacter(
        sourceData.system,
        conversionData
      );
    } else if (sourceType === "monster" && targetType === "npc") {
      newActorData.system = convertMonsterToNPC(
        sourceData.system,
        conversionData
      );
    }

    newActorData.prototypeToken = getTokenPrototype(targetType);

    const newActor = await Actor.create(newActorData);

    if (newActor) {
      ui.notifications.success(
        `Successfully converted ${sourceActor.name} to ${targetType}: ${newActor.name}`
      );

      newActor.sheet.render(true);
    } else {
      ui.notifications.error("Failed to create new actor.");
    }
  } catch (error) {
    console.error("Actor conversion error:", error);
    ui.notifications.error(`Conversion failed: ${error.message}`);
  }
}

function convertCharacterToNPC(sourceSystem) {
  const strDmgBonus = convertDamageBonusToKey(
    sourceSystem.damageBonus?.str?.value
  );
  const aglDmgBonus = convertDamageBonusToKey(
    sourceSystem.damageBonus?.agl?.value
  );

  const currentHP = sourceSystem.hitPoints?.value || 10;
  const maxHP =
    sourceSystem.hitPoints?.max || sourceSystem.hitPoints?.base || 10;

  const currentWP = sourceSystem.willPoints?.value || 10;
  const maxWP =
    sourceSystem.willPoints?.max || sourceSystem.willPoints?.base || 10;

  const movementValue =
    sourceSystem.movement?.value || sourceSystem.movement?.base || 10;

  return {
    description: sourceSystem.description || "",
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    hitPoints: {
      value: currentHP,
      base: maxHP,
      max: maxHP,
    },

    willPoints: {
      value: currentWP,
      base: maxWP,
      max: maxWP,
    },

    movement: {
      value: movementValue,
      base: movementValue,
    },

    kin: sourceSystem.kin || "",
    age: sourceSystem.age || "adult",
    profession: sourceSystem.profession || "",
    motivation: sourceSystem.motivation || "",

    damageBonus: {
      agl: {
        base: aglDmgBonus,
        value: aglDmgBonus,
      },
      str: {
        base: strDmgBonus,
        value: strDmgBonus,
      },
    },

    traits: "",
  };
}

function convertCharacterToMonster(sourceSystem, conversionData) {
  return {
    description: sourceSystem.description || "",
    movement: sourceSystem.movement,
    hitPoints: sourceSystem.hitPoints,
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    armor: conversionData.armor || 0,
    ferocity: {
      base: conversionData.ferocity || 1,
      value: conversionData.ferocity || 1,
    },
    size: conversionData.size || "normal",
    traits: "",
    attackTable: "",
    previousMonsterAttack: "",
  };
}

function convertNPCToCharacter(sourceSystem, conversionData) {
  const attrs = conversionData.attributes;

  return {
    description: sourceSystem.description || "",
    movement: sourceSystem.movement,
    hitPoints: sourceSystem.hitPoints,
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    kin: sourceSystem.kin || "",
    age: sourceSystem.age || "adult",
    profession: sourceSystem.profession || "",
    motivation: sourceSystem.motivation || "",
    willPoints: {
      value: attrs.wil,
      base: attrs.wil,
      max: attrs.wil,
    },

    attributes: {
      str: { base: attrs.str, value: attrs.str },
      con: { base: attrs.con, value: attrs.con },
      agl: { base: attrs.agl, value: attrs.agl },
      int: { base: attrs.int, value: attrs.int },
      wil: { base: attrs.wil, value: attrs.wil },
      cha: { base: attrs.cha, value: attrs.cha },
    },
    conditions: {
      str: { value: false },
      con: { value: false },
      agl: { value: false },
      int: { value: false },
      wil: { value: false },
      cha: { value: false },
    },
    appearance: "",
    weakness: "",
    notes: sourceSystem.traits || "",
    deathRolls: {
      successes: 0,
      failures: 0,
    },
    canRestRound: true,
    canRestStretch: true,
    maxEncumbrance: {
      base: Math.ceil(0.5 * attrs.str),
      value: Math.ceil(0.5 * attrs.str),
    },
  };
}

function convertNPCToMonster(sourceSystem, conversionData) {
  return {
    description: sourceSystem.description || "",
    movement: sourceSystem.movement,
    hitPoints: sourceSystem.hitPoints,
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    armor: conversionData.armor || 0,
    ferocity: {
      base: conversionData.ferocity || 1,
      value: conversionData.ferocity || 1,
    },
    size: conversionData.size || "normal",
    traits: sourceSystem.traits || "",
    attackTable: "",
    previousMonsterAttack: "",
  };
}

function convertMonsterToCharacter(sourceSystem, conversionData) {
  const attrs = conversionData.attributes;

  return {
    description: sourceSystem.description || "",
    movement: sourceSystem.movement,
    hitPoints: sourceSystem.hitPoints,
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    kin: "",
    age: "adult",
    profession: "",
    motivation: "",
    willPoints: {
      value: attrs.wil,
      base: attrs.wil,
      max: attrs.wil,
    },
    damageBonus: {
      agl: {
        base: calculateDamageBonus(attrs.agl),
        value: calculateDamageBonus(attrs.agl),
      },
      str: {
        base: calculateDamageBonus(attrs.str),
        value: calculateDamageBonus(attrs.str),
      },
    },

    attributes: {
      str: { base: attrs.str, value: attrs.str },
      con: { base: attrs.con, value: attrs.con },
      agl: { base: attrs.agl, value: attrs.agl },
      int: { base: attrs.int, value: attrs.int },
      wil: { base: attrs.wil, value: attrs.wil },
      cha: { base: attrs.cha, value: attrs.cha },
    },
    conditions: {
      str: { value: false },
      con: { value: false },
      agl: { value: false },
      int: { value: false },
      wil: { value: false },
      cha: { value: false },
    },
    appearance: "",
    weakness: "",
    notes: sourceSystem.traits || "",
    deathRolls: {
      successes: 0,
      failures: 0,
    },
    canRestRound: true,
    canRestStretch: true,
    maxEncumbrance: {
      base: Math.ceil(0.5 * attrs.str),
      value: Math.ceil(0.5 * attrs.str),
    },
  };
}

function convertMonsterToNPC(sourceSystem, conversionData) {
  return {
    description: sourceSystem.description || "",
    movement: sourceSystem.movement,
    hitPoints: sourceSystem.hitPoints,
    currency: sourceSystem.currency,
    encumbrance: sourceSystem.encumbrance,

    kin: "",
    age: "adult",
    profession: "",
    motivation: "",
    willPoints: {
      value: conversionData.wil || 10,
      base: conversionData.wil || 10,
      max: conversionData.wil || 10,
    },
    damageBonus: {
      agl: {
        base: conversionData.damageBonus?.agl || "none",
        value: conversionData.damageBonus?.agl || "none",
      },
      str: {
        base: conversionData.damageBonus?.str || "none",
        value: conversionData.damageBonus?.str || "none",
      },
    },

    traits: sourceSystem.traits || "",
  };
}

function calculateDamageBonus(attributeValue) {
  if (attributeValue <= 9) return "none";
  if (attributeValue <= 12) return "d4";
  if (attributeValue <= 16) return "d6";
  return "d8";
}

function convertDamageBonusToKey(damageBonus) {
  if (!damageBonus) return "none";

  if (damageBonus.match(/^(none|d4|d6|d8|d10|d12|d20)$/i)) {
    return damageBonus.toLowerCase();
  }

  const match = damageBonus.match(/d(\d+)/i);
  if (match) {
    return `d${match[1]}`;
  }

  if (damageBonus.toLowerCase().includes("none")) {
    return "none";
  }

  return "none";
}

function getTokenPrototype(actorType) {
  const baseSettings = {
    name: "",
    displayName: 20,
    displayBars: 20,
    bar1: { attribute: "hitPoints" },
  };

  switch (actorType) {
    case "character":
      return {
        ...baseSettings,
        actorLink: true,
        disposition: 1,
        bar2: { attribute: "willPoints" },
        displayBars: 30,
        sight: { enabled: true },
      };
    case "npc":
      return {
        ...baseSettings,
        disposition: 0,
      };
    case "monster":
      return {
        ...baseSettings,
        disposition: -1,
      };
    default:
      return baseSettings;
  }
}
