// COMBINED MAGIC TRICK & SPELL MACRO
if (typeof item === "undefined") {
  ui.notifications.warn("This macro must be run from within an ItemMacro.");
  return;
}

// Setup
const itemName = item.name;
const itemType = item.type;

// Determine if this is a Magic Trick or regular Spell
const isMagicTrick = item.system.rank === 0;

// Set cost based on item type
const wpCost = isMagicTrick ? 
  (item.system?.cost?.value || 1) : 
  (item.system.rank * 2);

// Audio/Visual setup (trick : spell)
const SOUND_PATH = isMagicTrick ? 
  "sounds/Spells/Whoosh/spell-whoosh-13.mp3" : 
  "sounds/Spells/Buff/spell-buff-long-4.mp3";

const EFFECT_PATH = isMagicTrick ? 
  "jb2a.wind_stream.1200.white" : 
  "jb2a.condition.boon.01.009.green";

const SCALE = isMagicTrick ? 1.0 : 0.4;
const REQUIRES_TARGET = false; // Set to true if spell needs target
const status_id = ""; // Set to status effect ID like "prone", "stunned", "charmed", "frightened", etc. Leave empty to disable
const DEBUG_MODE = false;

// Pre-load sound file
try {
  await AudioHelper.preloadSound(SOUND_PATH);
} catch (error) {
  console.warn(`Failed to preload sound: ${SOUND_PATH}`, error);
}

// Token & Actor Checks
const selectedToken = canvas.tokens.controlled[0];
if (!selectedToken) {
  ui.notifications.warn(`Please select your token before casting ${itemName}.`);
  return;
}

// Check if user owns the selected token
if (!selectedToken.isOwner) {
  ui.notifications.warn("You don't have permission to use this token.");
  return;
}

const caster = selectedToken.actor;
if (!caster) {
  ui.notifications.error("Selected token has no associated actor.");
  return;
}

const spell = caster.items.find(i => i.name === itemName && i.type === item.type);
if (!spell) {
  const itemTypeText = isMagicTrick ? "magic trick" : "spell";
  ui.notifications.warn(`You do not know the ${itemTypeText} ${itemName}!`);
  return;
}

// Target validation
if (REQUIRES_TARGET && game.user.targets.size === 0) {
  ui.notifications.warn(`Please choose the target before casting ${itemName}.`);
  return; 
}

// WP validation
const wpValue = caster.system.willPoints?.value;
if (typeof wpValue !== 'number') {
  ui.notifications.error("Character sheet doesn't have valid Willpower points.");
  return;
}
if (wpValue < wpCost) {
  ui.notifications.warn(`Not enough Willpower! Need ${wpCost} WP, have ${wpValue} WP.`);
  return;
}

// Main execution function
async function executeSpellEffect() {
  try {
    // Update WP
    const currentWP = caster.system.willPoints.value;
    const newWP = Math.max(0, currentWP - wpCost);
    
    await caster.update({ "system.willPoints.value": newWP });
    
    const name = caster?.name;
    ui.notifications.info(`${name} spent ${wpCost} WP. ${newWP} WP remaining.`);
    
    // Enrich description
    let description = "";
    try {
      description = await TextEditor.enrichHTML(item.system.description || "", { async: true });
    } catch (error) {
      console.warn("Failed to enrich HTML description:", error);
      description = item.system.description || "No description available.";
    }
    
    // Enhanced chat message with linked item name
    const itemTypeText = isMagicTrick ? "magic trick" : "spell";
    const linkedItemName = `@UUID[${item.uuid}]{${itemName}}`;
    const chatContent = `
      <b>${name}</b> casts the ${itemTypeText} ${linkedItemName}!<br><br>
      <details>
        <summary><strong>Show ${isMagicTrick ? 'Trick' : 'Spell'} Description</strong></summary>
        ${description}
      </details>
    `;
    
    // Create chat message
    await ChatMessage.create({
      user: game.user.id,
      speaker: ChatMessage.getSpeaker({ token: selectedToken }),
      content: chatContent
    });
    
    // Apply status effect
    if (status_id && status_id.trim() !== "") {
      try {
        const hasEffect = caster.effects.find(e => e.statuses?.has(status_id));
        if (!hasEffect) {
          await caster.toggleStatusEffect(status_id, { active: true });
          console.log(`Applied status effect: ${status_id}`);
        } else {
          console.log(`Actor already has status effect: ${status_id}`);
        }
      } catch (error) {
        console.warn(`Failed to apply status effect ${status_id}:`, error);
      }
    }
    
    // Get target if needed
    const target = REQUIRES_TARGET ? Array.from(game.user.targets)[0] : null;
    const effectLocation = target || selectedToken;
    
    // Sequencer effects
    try {
      const sequence = new Sequence()
        .sound(SOUND_PATH)
        .effect()
          .file(EFFECT_PATH)
          .atLocation(effectLocation)
          .scale(SCALE);
      
      // Add additional effects for targets if applicable
      if (target && target !== selectedToken) {
        sequence.effect()
          .file(EFFECT_PATH)
          .atLocation(target)
          .scale(SCALE * 0.8);
      }
      
      await sequence.play();
    } catch (error) {
      console.warn("Failed to play Sequencer effects:", error);
      // Don't show user notification for Sequencer failures as they're not critical
    }
    
  } catch (error) {
    console.error("Error executing spell macro:", error);
    ui.notifications.error(`Failed to cast ${itemName}: ${error.message}`);
  }
}

// Execute based on item type
if (isMagicTrick) {
  // Magic Tricks use confirmation dialog
  new Dialog({
    title: "Cast Magic Trick",
    content: `<p>Spend <b>${wpCost} WP</b> to cast <b>${itemName}</b>?</p>`,
    buttons: {
      yes: {
        icon: '<i class="fas fa-check"></i>',
        label: "Yes",
        callback: executeSpellEffect
      },
      no: {
        icon: '<i class="fas fa-times"></i>',
        label: "No"
      }
    },
    default: "no"
  }).render(true);
} else {
  // Regular spells require a roll first
  let rollResult;
  
  try {
    rollResult = await game.dragonbane.rollItem(itemName);
    if (DEBUG_MODE) console.log(`[Spell Macro] ${itemName} - Roll Result:`, rollResult);
  } catch (error) {
    ui.notifications.warn(`${itemName} casting was cancelled.`);
    return;
  }
  
  // Check if the user canceled the roll
  if (!rollResult?.postRollData) {
    ui.notifications.warn(`${itemName} casting was cancelled.`);
    return;
  }
  
  // Only execute if roll was successful
  if (rollResult.postRollData.success) {
    await executeSpellEffect();
  }
}
